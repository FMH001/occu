<script type="text/javascript">
  Cursor.set(Cursor.WAIT);
  iseInitUpdateArrays();

<%
  boolean firstSort = false;
  
  object oUser = dom.GetObject( system.GetSessionVar("sessionUserID") );
  if( (system.GetSessionVar("sessionCTV")=="true") || (system.GetSessionVar("sessionTAB1") != system.GetVar("id")) )
  {
    system.SetSessionVar("sessionLS","");
    oUser.UserTempViewIDs().RemoveAll();
    
    Write('iseClearLastSort();');

    object oTmpArray = dom.GetObject(system.GetVar("id"));
    if( oTmpArray )
    {
      oTmpArray.SortByName();
      string sTmp;
      foreach(sTmp,oTmpArray.EnumIDs())
      {
        object oTmp = dom.GetObject( sTmp );
        if( oTmp )
        {
          boolean bHasDPs = (oTmp.DPs().EnumEnabledVisibleIDs().Length());
          boolean bIsSysVarDP = false;
          object oTmpDP = dom.GetObject( oTmp.DefaultDPWrite() );
          if( oTmpDP )
          {
            ! This prevents that a channel linked with a system variable is visible in the function list
            ! The Weather-Channel e. g. is of the type VARDP.
            ! bIsSysVarDP = ( oTmpDP.IsTypeOf( OT_VARDP ) || oTmpDP.IsTypeOf( OT_ALARMDP ) );
            bIsSysVarDP = oTmpDP.IsTypeOf( OT_ALARMDP ) ;
          }
          if( (bHasDPs) && (!bIsSysVarDP) )
          {
            oUser.UserTempViewIDs().Add( oTmp.ID() );
          }
        }
      }
    }
    firstSort = true;
  }
  system.SetSessionVar("sessionTAB1", system.GetVar("id") );
%>

  arChns = new Array();
  chn = null;
</script>
<table id="tblHFuncChannels" class="filterTable CLASS03800 j_translate" cellpadding="0" cellspacing="0" border="1">
  
  <colgroup>
     <col width="15%" />
     <col width="15%" />
     <col width="15%" />
     <col width="55%" />
  </colgroup>
  
  <tr>
  <%string sCssName="Sort"; if(system.GetSessionVar("sessionLS")=="name"){sCssName="SortSelected";} %>
  <th><div id="name" class="pt11 <%Write(sCssName); %>" onclick="IseSort(arChns,'name',true);">${thName}</div></th>
  <%string sCssName="Sort"; if(system.GetSessionVar("sessionLS")=="room"){sCssName="SortSelected";} %>
  <th><div id="room" class="pt11 <%Write(sCssName); %>" onclick="IseSort(arChns,'room',true);">${thRoom}</div></th>
  <th>${thLastChange}</th>
  <th>${thControl}</th>
  </tr>
  
  <tr>
  <td class="CLASS03801">
    <div id="btnFilterName" class="FilterBtn">${thFilter}</div>
    <div class="FilterSubMenu" id="btnFilterNameSub" style="display:none">
        <input id="ftName" onkeypress="iseSFilterCheckEnterEsc(event.keyCode, 'ftSetNameBtn', 'ftCancelNameBtn')" type="text" size="15" class="CLASS03803" />
        <div id="ftSetNameBtn" class='FilterSetButton CLASS03804' onclick="setSFilter(fltHF, 'ftName', FIL_NAME);updateTable();$('btnFilterNameSub').hide();" >${filterSet}</div>
        <div id="ftCancelNameBtn" class='FilterSetButton' onclick="$('btnFilterNameSub').hide();">${filterClose}</div>
    </div>
  </td>
  <td class="CLASS03801">
    <div id="btnFilterRoom" class="FilterBtn">${thFilter}</div>
    <div class="FilterSubMenu" id="btnFilterRoomSub" style="display:none">
      <% 
        Write("<table class='CLASS03805'>");
        object obj = dom.GetObject(ID_ROOMS);
        if ( obj ) {
          string tmp = "";
          foreach( tmp, obj.EnumEnabledIDs() ) {
            object elem = dom.GetObject(tmp);
            if (elem) {
              string divId = "rdiv"#tmp;
                Write("<tr>");
                  Write("<td  class='CLASS03806'>"#elem.Name()#"</td>");
                  Write("<td  class='CLASS03806'><input type='checkbox' id='hr"#elem.ID()#"'/></td>");
                Write("</tr>");
            }
          }
        }
        Write("</table>");
        Write("<div class='FilterSetButton' onclick='setAFilter(fltHF, \"rooms\");updateTable();$(\"btnFilterRoomSub\").hide();'>${filterSet}</div>");
        Write("<div class='FilterSetButton' onclick='$(\"btnFilterRoomSub\").hide();'>${filterClose}</div>");
      %>
    </div>
  </td>
  <td class="CLASS03801">
  </td>
  <td class="CLASS03801">
  </td>
  </tr>
  <script type="text/javascript">translatePage("#tblHFuncChannels");</script>
   <%

    object oUser = dom.GetObject( system.GetSessionVar('sessionUserID'));
    integer userID = oUser.ID();
    object user = dom.GetObject(userID);


    object func = dom.GetObject(system.GetVar("id"));
    if (func) {
      if (func.Visible()) {
        string tmp;
        foreach(tmp, oUser.UserTempViewIDs().EnumEnabledIDs()) {
          string trId = func.ID()#tmp;
          Write("<tr id='"#trId#"'>");
          object chn = dom.GetObject(tmp);
          object oDev = dom.GetObject(chn.Device());

          string oDevHssType = oDev.HssType();
          integer chNumber = chn.ChnNumber();

          ! Determine the name of the interface
          integer iFaceID = chn.Interface();
          object oIface = dom.GetObject(iFaceID);
          string sInterface = oIface.Name();

          
          boolean bShow = false;
          if (chn.Visible() && (chn.UserAccessRights(iulOtherThanAdmin) == iarFullAccess)) {
            bShow = true;
          }

        boolean bShowChannel = false;
  Write("<script type='text/javascript'>console.log('A bShowChannel: "#bShowChannel#"');</script>");

        if (user.UserEasyLinkMode() != true) {
          ! User is expert
          bShowChannel = true;
        } else {
          if (chn.HssType().Find("VIRTUAL_") == -1) {
              ! not a virtual channel
              bShowChannel = true;
          } else {
            if (chn.HssType().Find("VIRTUAL_KEY") != -1) {
              ! virtual key of the ccu
              bShowChannel = true;
            }
          }
        }

  Write("<script type='text/javascript'>console.log('B bShowChannel: "#bShowChannel#"');</script>");

        if (sInterface != "HmIP-RF") {
          if(chn.HssType().Find("CONDITION_") != -1) {
            ! channel 3 - 6 of the powermeter
            bShowChannel = false;
          }

          if((chn.HssType().Find("SWITCH_TRANSMIT") != -1) && (chn.HssType().Find("SWITCH_TRANSMITTER") == -1)) {
            ! channel 7 of the ThermalControl-IndoorTemperatureSensor (e. g. HM-TC-IT-WM-W-EU)
            bShowChannel = false;
          }

          ! Status Display EPaper
          if(( (oDevHssType == "HM-Dis-EP-WM55") ) && (chNumber == 3)) {
            ! Hide channel 3 of this device
            bShowChannel = false;
          }
        } else {
          bShowChannel = true;
         ! Interface HmIP-RF
         if(chn.HssType().Find("MAINTENANCE") != -1) {
           ! Don't show the maintenance channel of the new HmIP devices
           ! This is necessary because the name of such a channel of an HmIP device
           !   can be MAINTENANCE_BAT_BL, MAINTENANCE_BAT_EL, MAINTENANCE_BAT_CL and so on
           ! For BidCos-RF this isn't necessary
           bShowChannel = false;
         }

         ! Pluggable Switch (PS)
         if(( (oDevHssType == "HMIP-PS") || (oDevHssType == "HmIP-PS") ) && (chNumber != 3)) {
           ! Show only channel 3 of this device
           bShowChannel = false;
         }

         ! Pluggable Switch and Meter (PSM)
         if ( (oDevHssType == "HMIP-PSM") || (oDevHssType == "HmIP-PSM") ) {
           if ((chNumber == 1) || (chNumber == 2) || (chNumber == 4) || (chNumber == 5)) {
             bShowChannel = false;
           }
         }

         ! Wall Thermostat (WTH) - this shouldn't be necessary because channel 5 has no params
         ! so it should never appear. Currently channel 5 has some wrongly params.
         ! So we have to hide this channel. With a modified crRFD this can easily be removed
         if( ((oDevHssType == "HMIP-WTH") || (oDevHssType == "HmIP-WTH")) && (chNumber == 5) ) {
           ! Hide channel 5. Channel 1 is visible,
           ! The channels 2, 3, 4 and 6 don´t have any parameters so they don`t appear in the list
           bShowChannel = false;
         }

         ! Flush mounted Switch and Meter (BSM)
         ! When bShowChannel == true, the channel is visible
         ! You can hide the channel by setting the value to false
         if ( oDevHssType == "HmIP-BSM" ) {
           if (chNumber == 3) {
             bShowChannel = true;
           }
         }
        }

  Write("<script type='text/javascript'>console.log('C bShowChannel: "#bShowChannel#"');</script>");

          if( bShow && chn.ReadyConfig() && oDev.ReadyConfig() && bShowChannel )
          {
            Write("<td class='GrayBkg'>");
            Write(chn.Name());
            Write("</td>");
            Write("<td  class='GrayBkg'>");
            string rooms = "";
            string roomTmp = "";
            string roomIDs = "";
            foreach(roomTmp, chn.ChnRoom()) {
              object objTmp = dom.GetObject(roomTmp);
              rooms = rooms # objTmp.Name() # "<br />";
              roomIDs = roomIDs # objTmp.ID() # '\t';
            }
            Write(rooms);
            Write("</td>");
            Write("<td class='GrayBkg'>");
            
            Write("<table>");
            Write("<tr><td class='CLASS03802'><span id='tmc"#chn.ID()#"'><br /><br />");
            
            integer cId = chn.ID();
            string sLastTime = "";
            Call("/esp/system.fn::getLastTime()");
            if (sLastTime == "") { Write("&nbsp;"); }
            else {Write(sLastTime);}
            
            Write("</span></td></tr>");
            Write( '<tr><td align="center" class="CLASS03802">' );
            string sDisplay = 'none';
            if( chn.WorkingDPState() ) { sDisplay = "inline"; }
            Write( '<span id="work'#cId#'" style="display:'#sDisplay#';"><img src="/ise/img/pinion_gears_32.png" /></span>' );
            sDisplay = 'none';
            if( chn.ExistServiceMsg() ) { sDisplay = "inline"; }
            Write( '<span id="warn'#cId#'" style="display:'#sDisplay#'"><img src="/ise/img/warning.png" /></span>' );
            Write( '</td></tr></table>' );
            
            Write("</td>");
            Write("<td id='dpc"#chn.ID()#"' class='WhiteBkg'>");
            
            integer cId = chn.ID();
            string sCtrlId = "";
            integer iStatusOnly = 0;
            boolean bSliderFlag = true;            
            Call("/esp/datapointconfigurator.fn::dcCreate()");
            
            Write("</td>");
            Write("</tr>");
            
            Write("<script type='text/javascript'>");
            Write("chn = new Object();");
            Write("chn['id'] = '"#chn.ID()#"';");
            Write("chn['ctrlId'] = '"#sCtrlId#"';");
            Write("chn['name'] = '"#chn.Name()#"';");
            Write("chn['room'] = '"#rooms#"';");
            Write("chn['fltOpts'] = new Object();");
            Write("chn['fltOpts']['rooms'] = '"#roomIDs#"';");
            Write("chn['trid'] = '"#trId#"';");
            Write("arChns[arChns.length] = chn;");
            Write("if (!fltHF.objPassFilter(chn ))");
              Write("hide(chn['trid']);");
            Call("/esp/system.fn::writeWarnStateJS()"); 
            Write("</script>");
          }
        }
      }
    }
    
  %>    
  <script type="text/javascript">
    Cursor.set(Cursor.NORMAL);
  </script>
</table>


<script type="text/javascript">

  <%
    if(firstSort)
    {
      Write("//IseSort(arChns, 'name', true);");
    }
  %>

  colorFilterBtns(fltHF);
  var mouseOpts = {
    onTopOver: function(divToShow) {
      selectFilters(fltHF, divToShow);
    }
  };
  
  new iseSubMenuControl("btnFilterRoom", "btnFilterRoomSub", "divHTF",  {d:2}, mouseOpts, false, true);
  new iseSubMenuControl("btnFilterName", "btnFilterNameSub", "divHTF",  {d:2}, mouseOpts, false, true);

  jQuery("#btnFilterName").click(function(){
    jQuery("#ftName").focus();
  });

</script>